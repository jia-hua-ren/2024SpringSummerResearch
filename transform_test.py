import re
import sys

# the code to edit the driver file to build the test

def transform_file(file_path):
    # Read the content of the file
    with open(file_path, 'r') as file:
        content = file.readlines()
    
    # Initialize the list to store the transformed content
    transformed_content = []
    
    # Pattern for the .h file near the top
    pattern = re.compile(r'#include\s"(.+)_dot_(c|cpp)_test\.h"$')
    
    testPattern = re.compile(r'TEST\(regression, ((.)+)_test.\)')

    # State to track if we are in the comment
    comment = False
    
    # Variable to see if we have found a method name to be swapped (used for when swapping function names)
    methodNameToBeSwapped = ""

    # State when we reach the last pragma endregion (and therefore no more lines to process after)
    last = False

    for line in content:
         
        if not last:
            ## Remove the automatic comment left by UTBot on the top
            if line.startswith("/*"):
                comment = True
                continue
            if line.startswith(" */"):
                comment = False
                continue
            if comment:
                continue
            
            ## detect other comments
            if line.startswith("//"):
                if " were not generated. Maybe the function is too complex" in line:
                    transformed_content.append(line)
                    break
                continue

            ## check access_private.hpp and remove (not sure where/what this file is?)
            if "#include \"access_private.hpp\"" in line:
                continue

            # Change the first #include statement to include the actual method file
            # the h file is not needed, and we can extract information on the actual file from the name
            match = pattern.match(line)
            if match: 
                #print(match.group(0)) entire match
                #print(match.group(1)) first regex group: file name
                #print(match.group(2)) second regex group: c/cpp
                transformed_content.append("#include \"methods/" + method_filename + "\"\n") 
                continue

            
            # Remove the namespace UTBot section but keep the things inside
            if "namespace UTBot {" in line:
                continue
            # Remove the #pragma region regression and its corresponding #pragma endregion lines
            if "#pragma region regression" in line:
                continue
            if "#pragma endregion" in line:
                last = True
                continue

            testMatch = testPattern.match(line)
            if methodNameToBeSwapped:
                if methodNameToBeSwapped in line:
                    transformed_content.append(line.replace(methodNameToBeSwapped, methodName)) #swap to the correct method
                    continue

            if testMatch and not methodNameToBeSwapped:
                methodNameToBeSwapped = testMatch.group(1)

            # Append the line to the transformed content list
            transformed_content.append(line)
    # Add the driver code for googletest
    transformed_content.append("\n")
    transformed_content.append("int main(int argc, char **argv) {\n")
    transformed_content.append("testing::InitGoogleTest(&argc, argv);\n")
    transformed_content.append("return RUN_ALL_TESTS();\n")
    transformed_content.append("}\n")
    
    # Add comment to top of file
    transformed_content.insert(0, "// Tests generated by UTBot automatically, then I extract them to create driver file")

    # Write the transformed content back into driverC0de.cpp
    with open(driverPath, 'w') as file:
        file.writelines(transformed_content)

###### extract command line arguments

# Check if correct number of arguments (assumes arguments are correct from other script)
if len(sys.argv) != 4:
    print("error: provide method file name, method file path, and test file path to be processed ")
    sys.exit()
method_filename = sys.argv[1] # method file name to include on top of driver code
method_path = sys.argv[2] # method file path 
test_path = sys.argv[3] # test that is used to cross test
driverPath = "/genTests/driverC0de.cpp"


###### extract function name from the method definition file, used to substitute function name in tests
with open(method_path, 'r') as file:
    content = file.readlines()

methodSigPattern = re.compile(r'((.)+)\s((.)+)\(((.)+)\)(\s)?{')

methodName = "" # if empty after looping, it means something is wrong
for line in content:
    methodSig = methodSigPattern.match(line)
    if methodSig:
        methodName = methodSig.group(3) # this group is the function name
        break
if not methodName:
    print("error, method name not found in file")
    sys.exit()

###### now ready to transform the test file into driver code
transform_file(test_path)

